{"version":3,"file":"index.cjs","sources":["../src/provider.ts","../src/lib.ts","../src/routes.ts"],"sourcesContent":["import { JungleBusClient } from \"@gorillapool/js-junglebus\";\n// import * as Client from \"bitcoin-core\";\nimport fetch from \"cross-fetch\";\nimport createError from \"http-errors\";\nimport { Redis } from \"ioredis\";\n\nlet redis: Redis;\nif (process.env.REDIS_HOST) {\n  const host = process.env.REDIS_HOST;\n  const port = process.env.REDIS_PORT\n    ? parseInt(process.env.REDIS_PORT, 10)\n    : 6379;\n  console.log(\"Connecting to redis:\", host, port);\n  redis = new Redis(port, host);\n}\n\nexport interface ITxProvider {\n  network: string;\n  getRawTx: (string) => Promise<Buffer>;\n  getBlockchainInfo: () => Promise<{ height: number; hash: string }>;\n  getBlockByHeight: (number) => Promise<{ height: number; hash: string }>;\n  getBlockByHash: (string) => Promise<{ height: number; hash: string }>;\n}\n\n// export class RpcProvider implements ITxProvider {\n//   private client: Client;\n\n//   constructor(\n//     public network: string,\n//     host: string,\n//     port: string,\n//     username: string,\n//     password: string\n//   ) {\n//     this.client = new Client({\n//       host,\n//       port,\n//       username,\n//       password,\n//     });\n//   }\n\n//   async getRawTx(txid: string): Promise<Buffer> {\n//     let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n//     if (!rawtx) {\n//       rawtx = await this.client.getTransactionByHash(txid, {\n//         extension: \"bin\",\n//       });\n//       if (!rawtx) {\n//         throw new createError.NotFound();\n//       }\n//       redis?.set(`rawtx:${txid}`, rawtx);\n//     }\n//     return rawtx;\n//   }\n\n//   async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n//     const info = await this.client.getBlockchainInfo();\n//     return {\n//       height: info.blocks,\n//       hash: info.bestblockhash,\n//     };\n//   }\n\n//   async getBlockByHeight(\n//     height: number\n//   ): Promise<{ height: number; hash: string }> {\n//     const hash = await this.client.getBlockHash(height);\n//     return { height, hash };\n//   }\n\n//   async getBlockByHash(\n//     hash: string\n//   ): Promise<{ height: number; hash: string }> {\n//     const info = await this.client.getBlockHeader(hash);\n//     return {\n//       height: info.height,\n//       hash,\n//     };\n//   }\n// }\n\nexport class JungleBusProvider implements ITxProvider {\n  public network = \"bsv\";\n\n  async getRawTx(txid: string): Promise<Buffer> {\n    let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n    if (!rawtx) {\n      const jb = new JungleBusClient(\"https://junglebus.gorillapool.io\");\n      const txnData = await jb.GetTransaction(txid);\n      rawtx = Buffer.from(txnData!.transaction, \"base64\");\n      redis?.set(`rawtx:${txid}`, rawtx);\n    }\n    return rawtx;\n  }\n\n  async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      \"https://api.whatsonchain.com/v1/bsv/main/block/headers\"\n    );\n    if (!resp.ok) {\n      throw createError(resp.status, resp.statusText);\n    }\n    const info = await resp.json();\n    return {\n      height: info[0].height,\n      hash: info[0].hash,\n    };\n  }\n\n  async getBlockByHeight(\n    height: number\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://api.whatsonchain.com/v1/bsv/main/block/height/${height}`\n    );\n    const info = await resp.json();\n    return { height, hash: info.hash };\n  }\n\n  async getBlockByHash(\n    hash: string\n  ): Promise<{ height: number; hash: string }> {\n    const resp = await fetch(\n      `https://api.whatsonchain.com/v1/bsv/main/block/hash/${hash}`\n    );\n    const info = await resp.json();\n\n    return {\n      height: info.height,\n      hash,\n    };\n  }\n}\n\n// export class BtcProvider implements ITxProvider {\n//   public network = \"btc\";\n\n//   async getRawTx(txid: string): Promise<Buffer> {\n//     let rawtx = await redis?.getBuffer(`rawtx:${txid}`);\n//     if (!rawtx) {\n//       // TODO: Make this configuration based\n//       const resp = await fetch(\n//         `https://ordfs.gorillapool.io/v1/btc/tx/${txid}`\n//       );\n//       if (!resp.ok) {\n//         throw createError(resp.status, resp.statusText);\n//       }\n//       rawtx = Buffer.from(await resp.arrayBuffer());\n//       redis?.set(`rawtx:${txid}`, rawtx);\n//     }\n//     return rawtx;\n//   }\n\n//   async getBlockchainInfo(): Promise<{ height: number; hash: string }> {\n//     // TODO: Make this configuration based\n//     const resp = await fetch(\n//       \"https://ordfs.gorillapool.io/v1/btc/block/latest\"\n//     );\n//     if (!resp.ok) {\n//       throw createError(resp.status, resp.statusText);\n//     }\n\n//     return resp.json();\n//   }\n\n//   async getBlockByHeight(\n//     height: number\n//   ): Promise<{ height: number; hash: string }> {\n//     const resp = await fetch(\n//       `https://ordfs.gorillapool.io/v1/btc/block/height/${height}`\n//     );\n//     const info = await resp.json();\n//     return { height, hash: info.hash };\n//   }\n\n//   async getBlockByHash(\n//     hash: string\n//   ): Promise<{ height: number; hash: string }> {\n//     const resp = await fetch(\n//       `https://ordfs.gorillapool.io/v1/btc/block/hash/${hash}`\n//     );\n//     const info = await resp.json();\n\n//     return {\n//       height: info.height,\n//       hash,\n//     };\n//   }\n// }\n","import { OpCode, Script, Tx } from \"@ts-bitcoin/core\";\n// import { Transaction } from \"bitcore-lib\";\nimport * as dns from \"dns/promises\";\nimport createError from \"http-errors\";\nimport fetch from \"cross-fetch\";\nimport {\n  // BtcProvider,\n  ITxProvider,\n  JungleBusProvider,\n  // RpcProvider,\n} from \"./provider\";\n\nconst B = Buffer.from(\"19HxigV4QyBv3tHpQVcUEQyq1pzZVdoAut\");\nconst ORD = Buffer.from(\"ord\");\n\n// let btcProvider: ITxProvider = new BtcProvider();\nlet bsvProvider: ITxProvider = new JungleBusProvider();\n\n// if (process.env.BITCOIN_HOST) {\n//   bsvProvider = new RpcProvider(\n//     \"bsv\",\n//     process.env.BITCOIN_HOST || \"\",\n//     process.env.BITCOIN_PORT || \"8332\",\n//     process.env.BITCOIN_USER || \"\",\n//     process.env.BITCOIN_PASS || \"\"\n//   );\n// }\n\n// if (process.env.BTC_HOST) {\n//   btcProvider = new RpcProvider(\n//     \"btc\",\n//     process.env.BTC_HOST || \"\",\n//     process.env.BTC_PORT || \"8332\",\n//     process.env.BTC_USER || \"\",\n//     process.env.BTC_PASS || \"\"\n//   );\n// }\n\nexport async function getLatestBlock(\n  network: string\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    // case \"btc\":\n    //   return btcProvider.getBlockchainInfo();\n    case \"bsv\":\n      return bsvProvider.getBlockchainInfo();\n    default:\n      throw new createError.NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getBlockByHeight(\n  network: string,\n  height: number\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    // case \"btc\":\n    //   return btcProvider.getBlockByHeight(height);\n    case \"bsv\":\n      return bsvProvider.getBlockByHeight(height);\n    default:\n      throw new createError.NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getBlockByHash(\n  network: string,\n  hash: string\n): Promise<{ height: number; hash: string }> {\n  switch (network) {\n    // case \"btc\":\n    //   return btcProvider.getBlockByHash(hash);\n    case \"bsv\":\n      return bsvProvider.getBlockByHash(hash);\n    default:\n      throw new createError.NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function getRawTx(\n  network: string,\n  txid: string\n): Promise<Buffer | undefined> {\n  switch (network) {\n    // case \"btc\":\n    //   return btcProvider.getRawTx(txid);\n    case \"bsv\":\n      return bsvProvider.getRawTx(txid);\n    default:\n      throw new createError.NotFound(\"Network Not Found\");\n  }\n}\n\nexport async function loadPointerFromDNS(hostname: string): Promise<string> {\n  const lookupDomain = `_ordfs.${hostname}`;\n  const TXTs = await dns.resolveTxt(lookupDomain);\n  const prefix = \"ordfs=\";\n  let pointer = \"\";\n  console.log(\"Lookup Up:\", lookupDomain);\n  outer: for (const TXT of TXTs) {\n    for (const elem of TXT) {\n      if (!elem.startsWith(prefix)) continue;\n      console.log(\"Elem:\", elem);\n      pointer = elem.slice(prefix.length);\n      console.log(\"Origin:\", pointer);\n      break outer;\n    }\n\n    if (!pointer) {\n      throw new createError.NotFound();\n    }\n  }\n  return pointer;\n}\n\nexport async function loadInscription(pointer: string, metadata = false): Promise<File> {\n  console.log(\"loadInscription\", pointer);\n  let file: File | undefined;\n  if (pointer.match(/^[0-9a-fA-F]{64}_\\d*$/)) {\n    const [txid, vout] = pointer.split(\"_\");\n    console.log(\"BSV:\", txid, vout);\n    const rawtx = await bsvProvider.getRawTx(txid);\n    if (!rawtx) throw new Error(\"No raw tx found\");\n    const tx = Tx.fromBuffer(rawtx);\n    const v = parseInt(vout, 10);\n    const script = tx.txOuts[v].script;\n    if (!script) throw new createError.NotFound();\n    file = parseScript(script);\n    if (file && metadata) {\n      try {\n        const url =`https://ordinals.gorillapool.io/api/inscriptions/outpoint/${pointer}`;\n        const resp = await fetch(url);\n        const data = await resp.json();\n        const { hash } = await bsvProvider.getBlockByHeight(data!.height);\n        const meta: Meta = {\n          height: data.height,\n          MAP: data.MAP,\n          hash,\n          txid,\n          v,\n        };\n        file.meta = meta;\n      } catch {};\n    }\n  // } else if (pointer.match(/^[0-9a-fA-F]{64}i\\d+$/) && btcProvider) {\n  //   const [txid, vin] = pointer.split(\"i\");\n  //   console.log(\"BTC\", txid, vin);\n  //   const rawtx = await btcProvider.getRawTx(txid);\n  //   if (!rawtx) throw new Error(\"No raw tx found\");\n  //   const tx = new Transaction(rawtx);\n  //   const script = Script.fromBuffer(tx.inputs[parseInt(vin, 10)].witnesses[1]);\n  //   if (!script) throw new createError.NotFound();\n  //   file = parseScript(script);\n  } else throw new Error(\"Invalid Pointer\");\n\n  if (!file) throw new createError.NotFound();\n  return file;\n}\n\nexport interface Meta {\n  height?: number;\n  hash?: string;\n  txid: string;\n  v: number;\n  MAP?: {[key:string]:any}\n}\n\nexport interface File {\n  type: string;\n  data: Buffer;\n  meta?: Meta;\n}\n\nexport interface OrdFS {\n  [filename: string]: string;\n}\n\nexport function parseScript(script: Script): File | undefined {\n  let opFalse = 0;\n  let opIf = 0;\n  let opORD = 0;\n\n  let type = \"application/octet-stream\";\n  let data = Buffer.alloc(0);\n  for (const [i, chunk] of script.chunks.entries()) {\n    if (chunk.buf?.equals(B) && script.chunks.length > i + 2) {\n      data = script.chunks[i + 1].buf!;\n      type = script.chunks[i + 2].buf!.toString();\n      return { data, type };\n    }\n    if (chunk.opCodeNum === OpCode.OP_FALSE) {\n      opFalse = i;\n    }\n    if (chunk.opCodeNum === OpCode.OP_IF) {\n      opIf = i;\n    }\n    if (chunk.buf?.equals(ORD) && opFalse === i - 2 && opIf === i - 1) {\n      opORD = i;\n      break;\n    }\n  }\n\n  for (let i = opORD + 1; i < script.chunks.length; i++) {\n    switch (script.chunks[i].opCodeNum) {\n      case OpCode.OP_FALSE:\n        while (\n          script.chunks[i + 1]?.opCodeNum >= 1 &&\n          script.chunks[i + 1]?.opCodeNum <= OpCode.OP_PUSHDATA4\n        ) {\n          data = Buffer.concat([data, script.chunks[i + 1].buf!]);\n          i++;\n        }\n        break;\n      case 1:\n        // treat 1 like OP_1 (BTC convention)\n        // console.log(script.chunks[i].toString('hex'))\n        if (script.chunks[i].buf![0] != 1) return;\n      case OpCode.OP_TRUE:\n        type = script.chunks[i + 1]!.buf!.toString(\"utf8\");\n        // console.log(\"Type:\", type)\n        i++;\n        break;\n      case OpCode.OP_ENDIF:\n        return { type, data };\n      default:\n        return;\n    }\n  }\n\n  return { type, data };\n}\n","import * as express from \"express\";\nimport { Response } from \"express\";\nimport createError from \"http-errors\";\nimport {\n  File,\n  OrdFS,\n  getBlockByHash,\n  getBlockByHeight,\n  getLatestBlock,\n  getRawTx,\n  loadInscription,\n  loadPointerFromDNS,\n} from \"./lib\";\n\nfunction sendFile(file: File, res: Response, immutable = true) {\n  res.header(\"Content-Type\", file.type || \"\");\n  if (file.meta) {\n    res.header('ordfs-meta', JSON.stringify(file.meta))\n  }\n  if (immutable && !file.meta) {\n    res.header(\"Cache-Control\", \"public,immutable,max-age=31536000\");\n  }\n  res.status(200).send(file.data);\n}\n\nexport function RegisterRoutes(app: express.Express) {\n  app.get(\"/\", async (req, res) => {\n    let outpoint: string;\n    try {\n      outpoint = await loadPointerFromDNS(req.hostname);\n    } catch (e: any) {\n      // DNS pointer not found\n      res.render(\"pages/index\");\n      return;\n    }\n    try {\n      const file = await loadInscription(outpoint);\n      if (file.type === \"ord-fs/json\" && !req.query[\"raw\"]) {\n        req.res?.redirect(\"index.html\");\n        return;\n      }\n      sendFile(file, res, false);\n    } catch (err) {\n      // TODO: inscription not found\n      res.render(\"pages/404\");\n    }\n  });\n\n  app.get(\"/v1/:network/block/latest\", async (req, res, next) => {\n    try {\n      res.json(await getLatestBlock(req.params.network));\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/block/height/:height\", async (req, res, next) => {\n    try {\n      res.json(\n        await getBlockByHeight(\n          req.params.network,\n          parseInt(req.params.height, 10)\n        )\n      );\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/block/hash/:hash\", async (req, res, next) => {\n    try {\n      res.json(await getBlockByHash(req.params.network, req.params.hash));\n    } catch (e) {\n      next(e);\n    }\n  });\n\n  app.get(\"/v1/:network/tx/:txid\", async (req, res) => {\n    res.set(\"Content-type\", \"application/octet-stream\");\n    res.send(await getRawTx(req.params.network, req.params.txid));\n  });\n  app.get(\"/:filename\", getInscriptionOrDnsFile);\n  app.get(\"/content/:pointer\", getInscription);\n  app.get(\"/preview/:b64HtmlData\", previewHtmlFromB64Data);\n  app.get(\"/:pointer/:filename\", getOrdfsFile);\n  app.get(\"/content/:pointer/:filename\", getOrdfsFile);\n\n  async function previewHtmlFromB64Data(req, res, next) {\n    try {\n      const b64HtmlData = req.params.b64HtmlData;\n      const htmlData = Buffer.from(b64HtmlData, \"base64\").toString(\"utf8\");\n      res.render(\"pages/preview\", { htmlData });\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getInscriptionOrDnsFile(req, res, next) {\n    const filename = req.params.filename;\n    try {\n      let pointer: string;\n      let file: File;\n      let immutable = true;\n      try {\n        // check if its an ordfs directory\n        file = await loadInscription(filename, req.query.meta);\n        if (file.type === \"ord-fs/json\" && !req.query.raw) {\n          req.res?.redirect(`/${filename}/index.html`);\n          return;\n        }\n      } catch (e: any) {\n        console.error(\"Outpoint Error\", filename, e.message);\n        pointer = await loadPointerFromDNS(req.hostname);\n        const dirData = await loadInscription(pointer);\n        const dir = JSON.parse(dirData.data!.toString(\"utf8\"));\n        if (!dir[filename]) {\n          throw new createError.NotFound();\n        }\n        pointer = dir[filename].slice(6);\n        file = await loadInscription(pointer, req.query.meta);\n        immutable = false;\n      }\n      sendFile(file, res, immutable);\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getInscription(req, res, next) {\n    const pointer = req.params.pointer;\n    try {\n      const file = await loadInscription(pointer, req.query.meta);\n      // check if its an ordfs directory\n      if (file.type === \"ord-fs/json\" && !req.query.raw) {\n        req.res?.redirect(`/${pointer}/index.html`);\n        return;\n      }\n      sendFile(file, res, true);\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  async function getOrdfsFile(req, res, next) {\n    try {\n      let pointer = req.params.pointer;\n      const filename = req.params.filename;\n      const dirData = await loadInscription(pointer);\n      const dir: OrdFS = JSON.parse(dirData.data!.toString(\"utf8\"));\n      if (!dir[filename]) {\n        throw new createError.NotFound();\n      }\n      if (dir[filename].startsWith(\"ord://\")) {\n        pointer = dir[filename].slice(6);\n      } else {\n        pointer = dir[filename];\n      }\n      const file = await loadInscription(pointer, req.query.meta);\n      sendFile(file, res, true);\n    } catch (err) {\n      next(err);\n    }\n  }\n}\n"],"names":["redis","process","env","REDIS_HOST","host","port","REDIS_PORT","parseInt","console","log","Redis","JungleBusProvider","network","_proto","prototype","getRawTx","txid","_redis","Promise","resolve","getBuffer","then","rawtx","_temp","jb","JungleBusClient","GetTransaction","txnData","_redis2","Buffer","from","transaction","set","e","reject","getBlockchainInfo","fetch","resp","ok","createError","status","statusText","json","info","height","hash","getBlockByHeight","getBlockByHash","loadInscription","pointer","metadata","file","_temp4","_result","NotFound","_temp3","match","_pointer$split","split","vout","bsvProvider","Error","tx","Tx","fromBuffer","v","script","txOuts","parseScript","_temp2","data","_ref","meta","MAP","_catch","loadPointerFromDNS","hostname","lookupDomain","dns","resolveTxt","TXTs","outer","_step","_iterator","_createForOfIteratorHelperLoose","done","_step2","_iterator2","value","elem","startsWith","slice","prefix","getLatestBlock","B","ORD","_step3","opFalse","opIf","opORD","type","alloc","_iterator3","chunks","entries","_chunk$buf","_chunk$buf2","_step3$value","i","chunk","buf","equals","length","toString","opCodeNum","OpCode","OP_FALSE","OP_IF","_script$chunks","_script$chunks2","OP_PUSHDATA4","concat","OP_TRUE","OP_ENDIF","sendFile","res","immutable","header","JSON","stringify","send","app","getOrdfsFile","req","next","params","filename","dirData","dir","parse","query","err","get","_exit","outpoint","_req$res","redirect","render","_loadPointerFromDNS","_json","_getLatestBlock","call","_json2","_getBlockByHeight","_temp5","_json3","_getBlockByHash","_send","_getRawTx","_exit2","_temp7","_result3","_temp6","_loadInscription","_req$res2","raw","error","message","_loadPointerFromDNS2","_loadInscription2","_req$res3","htmlData","b64HtmlData"],"mappings":"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"}